#!/usr/bin/env python
# coding=UTF-8
#
# generated by wxGlade 57e7a7d844ed on Wed May  1 22:57:41 2013
#

import wx, wx.richtext, wx.lib.buttons, wx.lib.delayedresult

# begin wxGlade: dependencies
import gettext
# end wxGlade

# begin wxGlade: extracode
# end wxGlade

import os, sys
import getpass
import socket
import math

# Climb the tree to find out where we are
p = os.path.abspath(__file__)
t = ""
while t != "src":
    (p, t) = os.path.split(p)
    if p == "":
        print "I have no idea where I am; this is ridiculous"
        sys.exit(1)

ltlmop_root = p
sys.path.append(os.path.join(p,"src","lib"))

#######################################################
############## CONFIGURATION SECTION ##################
#######################################################
class config:
    base_spec_file = os.path.join(ltlmop_root, "src", "examples", "gumbotest", "skeleton.spec")
    #base_spec_file = os.path.join(ltlmop_root, "src", "examples", "firefighting", "firefighting.spec")
    executor_listen_port = 20000
    gumbo_gui_listen_port = 20001





#######################################################
#######################################################

import project
import mapRenderer
from specCompiler import SpecCompiler
import execute
import multiprocessing
import xmlrpclib
from SimpleXMLRPCServer import SimpleXMLRPCServer
import threading
import globalConfig, logging

class GumboMainFrame(wx.Frame):
    def __init__(self, *args, **kwds):
        # begin wxGlade: GumboMainFrame.__init__
        kwds["style"] = wx.DEFAULT_FRAME_STYLE
        wx.Frame.__init__(self, *args, **kwds)
        self.window_1 = wx.SplitterWindow(self, wx.ID_ANY, style=wx.SP_3D | wx.SP_BORDER | wx.SP_LIVE_UPDATE)
        self.map_pane = wx.Panel(self.window_1, wx.ID_ANY, style=wx.TAB_TRAVERSAL | wx.FULL_REPAINT_ON_RESIZE)
        self.dialogue_pane = wx.Panel(self.window_1, wx.ID_ANY)
        self.text_ctrl_dialogue = wx.richtext.RichTextCtrl(self.dialogue_pane, wx.ID_ANY, "", style=wx.TE_MULTILINE | wx.TE_READONLY)
        self.text_ctrl_input = wx.TextCtrl(self.dialogue_pane, wx.ID_ANY, "")
        self.button_submit = wx.Button(self.dialogue_pane, wx.ID_ANY, _("Submit"))
        self.button_clear = wx.lib.buttons.GenBitmapTextButton(self.dialogue_pane, wx.ID_ANY, wx.Bitmap("icon-clear.png", wx.BITMAP_TYPE_PNG), _("    Clear Commands"))
        self.button_execute = wx.lib.buttons.GenBitmapTextButton(self.dialogue_pane, wx.ID_ANY, wx.Bitmap("icon-execute.png", wx.BITMAP_TYPE_PNG), _("    Execute"))

        self.__set_properties()
        self.__do_layout()

        self.Bind(wx.EVT_BUTTON, self.onSubmitInput, self.button_submit)
        self.Bind(wx.EVT_BUTTON, self.onClearCommands, self.button_clear)
        self.Bind(wx.EVT_BUTTON, self.onExecute, self.button_execute)
        self.Bind(wx.EVT_SPLITTER_SASH_POS_CHANGED, self.onResize, self.window_1)
        # end wxGlade

        self.Bind(wx.EVT_CLOSE, self.onClose)

        self.window_1.SetSashGravity(0.5)
        self.window_1.SetMinimumPaneSize(100)

        self.map_pane.SetBackgroundStyle(wx.BG_STYLE_CUSTOM)
        self.mapBitmap = None

        self.robotPos = None
        self.fiducialPositions = {}

        self.map_pane.Bind(wx.EVT_PAINT, self.onPaint)
        self.Bind(wx.EVT_ERASE_BACKGROUND, self.onEraseBG)

        self.proj = project.Project()
        self.proj.loadProject(config.base_spec_file)
        self.Bind(wx.EVT_SIZE, self.onResize, self)
        self.onResize()

    def initialize(self):
        self.text_ctrl_input.SetFocus()

        # Start execution context
        print "Starting executor..."
        self.executorReadyFlag = threading.Event()
        self.executorProcess = multiprocessing.Process(target=execute.execute_main, args=(config.executor_listen_port, self.proj.getFilenamePrefix()+".spec", None, False))
        self.executorProcess.start()


        # Start our own xml-rpc server to receive events from execute
        self.xmlrpc_server = SimpleXMLRPCServer(("localhost", config.gumbo_gui_listen_port), logRequests=False, allow_none=True)

        # Register functions with the XML-RPC server
        self.xmlrpc_server.register_function(self.handleEvent)

        # Kick off the XML-RPC server thread    
        self.XMLRPCServerThread = threading.Thread(target=self.xmlrpc_server.serve_forever)
        self.XMLRPCServerThread.daemon = True
        self.XMLRPCServerThread.start()
        print "GumboGUI listening for XML-RPC calls on http://localhost:{} ...".format(config.gumbo_gui_listen_port)

        # Connect to executor
        print "Connecting to executor...",
        while True:
            try:
                self.executorProxy = xmlrpclib.ServerProxy("http://localhost:{}".format(config.executor_listen_port), allow_none=True)

                # Register with executor for event callbacks   
                self.executorProxy.registerExternalEventTarget("http://localhost:{}".format(config.gumbo_gui_listen_port))
            except socket.error:
                sys.stdout.write(".")
            else:
                break

        print

        # Start dialogue manager
        self.dialogueManager = BarebonesDialogueManager(self, self.executorProxy)

        # Load in robot icon
        # https://commons.wikimedia.org/wiki/File:Hamton_the_hamster.gif
        self.robotIcon = wx.Bitmap("Hamton_the_hamster.gif", wx.BITMAP_TYPE_GIF)
        self.robotIconRotOffset = 270 * math.pi/180 # to account for orientation of robot within image
        self.robotIconSize = (19, 28)

        # Figure out the user's name, if we can
        try:
            self.user_name = getpass.getuser().title()
        except:
            self.user_name = "User"

        # Wait for executor to fully boot
        self.button_submit.Enable(False)
        self.appendLog(">> Please wait, initializing...")
        while not self.executorReadyFlag.wait(0.1):
            wx.Yield()
        self.appendLog(">> Ready!")
        self.appendLog("  ")
        self.button_submit.Enable(True)

        # Tell the user we are ready
        self.appendLog("Hello.", "System")

    def __set_properties(self):
        # begin wxGlade: GumboMainFrame.__set_properties
        self.SetTitle(_("Robot Control Interface"))
        self.SetSize((883, 728))
        self.text_ctrl_input.SetFocus()
        self.button_submit.SetDefault()
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: GumboMainFrame.__do_layout
        sizer_1 = wx.BoxSizer(wx.VERTICAL)
        sizer_2 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_4 = wx.BoxSizer(wx.VERTICAL)
        sizer_2_copy = wx.BoxSizer(wx.VERTICAL)
        sizer_3 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_2_copy.Add(self.text_ctrl_dialogue, 1, wx.ALL | wx.EXPAND, 5)
        sizer_3.Add(self.text_ctrl_input, 1, wx.RIGHT | wx.EXPAND, 5)
        sizer_3.Add(self.button_submit, 0, 0, 0)
        sizer_2_copy.Add(sizer_3, 0, wx.ALL | wx.EXPAND, 5)
        sizer_2.Add(sizer_2_copy, 3, wx.ALL | wx.EXPAND, 5)
        sizer_4.Add(self.button_clear, 0, wx.ALL | wx.EXPAND, 10)
        sizer_4.Add(self.button_execute, 0, wx.LEFT | wx.RIGHT | wx.EXPAND, 10)
        sizer_4.Add((20, 20), 1, 0, 0)
        sizer_2.Add(sizer_4, 1, wx.EXPAND, 0)
        self.dialogue_pane.SetSizer(sizer_2)
        self.window_1.SplitHorizontally(self.map_pane, self.dialogue_pane)
        sizer_1.Add(self.window_1, 1, wx.EXPAND, 0)
        self.SetSizer(sizer_1)
        self.Layout()
        # end wxGlade

    def handleEvent(self, eventType, eventData):
        """
        Processes messages from the controller, and updates the GUI accordingly
        """

        if eventType in ["FREQ"]: # Events to ignore
            pass
        elif eventType == "POSE":
            self.robotPos = eventData
            wx.CallAfter(self.onPaint)
        elif eventType == "FID":
            if eventData[1] is None:
                # Hide the fiducial
                del self.fiducialPositions[eventData[0]]
            else:
                # Update fiducial position
                self.fiducialPositions[eventData[0]] = eventData[1:]
        elif eventType == "MESSAGE":
            # Provide a way for any part of LTLMoP to give feedback
            wx.CallAfter(self.appendLog, eventData, "System")
        elif eventType == "READY":
            self.executorReadyFlag.set()
        else:
            print "[{}] {}".format(eventType, eventData)

    def onClose(self, event):
        print "Shutting down executor..."
        try:
            self.executorProxy.shutdown()
        except socket.error:
            # Executor probably crashed
            pass

        self.xmlrpc_server.shutdown()
        self.XMLRPCServerThread.join()
        print "Waiting for executor to quit..."
        print "(If this takes more than 5 seconds it has crashed and you will need to run `killall python` for now)"
        self.executorProcess.join(5)
        # After ten seconds, just kill it
        if self.executorProcess.is_alive():
            self.executorProcess.terminate() 

        event.Skip()

    def appendLog(self, message, agent=None):
        self.text_ctrl_dialogue.SetInsertionPointEnd()

        if agent is not None:
            self.text_ctrl_dialogue.BeginBold()
            self.text_ctrl_dialogue.WriteText(agent + ": ")
            self.text_ctrl_dialogue.EndBold()

        self.text_ctrl_dialogue.WriteText(message)
        self.text_ctrl_dialogue.LineBreak()

        self.text_ctrl_dialogue.ShowPosition(self.text_ctrl_dialogue.GetLastPosition())
        self.text_ctrl_dialogue.Refresh()

        wx.GetApp().Yield(True) # TODO: Why does a normal yield cause re-entrance here? Are we masking a bug?

    def onSubmitInput(self, event):  # wxGlade: GumboMainFrame.<event_handler>
        if self.text_ctrl_input.GetValue() == "" or \
           not self.button_submit.IsEnabled(): # for some reason Enter will
                                               # still trigger a disabled button
            event.Skip()
            return
        
        user_text = self.text_ctrl_input.GetValue()

        # echo
        wx.CallAfter(self.appendLog, user_text, self.user_name)
        wx.CallAfter(self.text_ctrl_input.Clear)

        # response
        if self.dialogueManager is None:
            wx.CallAfter(self.appendLog, "Dialogue manager not initialized", "!!! Error")
        else:
            wx.CallAfter(self._enableSubmitButton, False)
            wx.lib.delayedresult.startWorker(self.onReceiveReply, self.dialogueManager.tell, wargs=(user_text,), daemon=True)

        event.Skip()

    def _enableSubmitButton(self, state):
        if state:
            self.button_submit.Enable(True)
            self.button_submit.SetLabel("Submit")
        else:
            self.button_submit.Enable(False)
            self.button_submit.SetLabel("Please wait...")

        self.Layout()

    def onReceiveReply(self, result):
        """ when the dialoguemanager has gotten back to us """
        try:
            result = result.get()
        except IOError:
            logging.exception("Could not connect to SLURP pipeline.")
            wx.MessageBox("Could not connect to SLURP pipeline.  Please make sure it is running.", "Error",
                        style = wx.OK | wx.ICON_ERROR)
            result = None

        if result:
            self.appendLog(result, "System")

        self._enableSubmitButton(True)

    def onResize(self, event=None):  # wxGlade: GumboMainFrame.<event_handler>
        size = self.map_pane.GetSize()
        self.mapBitmap = wx.EmptyBitmap(size.x, size.y)
        self.mapScale = mapRenderer.drawMap(self.mapBitmap, self.proj.rfi, scaleToFit=True, drawLabels=mapRenderer.LABELS_ALL_EXCEPT_OBSTACLES, memory=True)

        self.Refresh()
        self.Update()

        if event is not None:
            event.Skip()

    def onEraseBG(self, event):
        # Avoid unnecessary flicker by intercepting this event
        pass

    def onPaint(self, event=None):
        if self.mapBitmap is None:
            return

        # Let's do some manual double-buffering, because the automatic stuff didn't seem to work
        draw_buf = wx.EmptyBitmap(*self.map_pane.GetClientSizeTuple())
        dc = wx.MemoryDC()
        dc.SelectObject(draw_buf)
        gc = wx.GraphicsContext.Create(dc)

        # Draw background
        gc.DrawBitmap(self.mapBitmap, 0, 0, self.mapBitmap.GetWidth(), self.mapBitmap.GetHeight())

        # Draw robot
        if self.robotPos is not None:
            gc.PushState()
            [x,y] = map(lambda x: int(self.mapScale*x), self.robotPos[0:2]) 
            #dc.SetBrush(wx.Brush(wx.WHITE, wx.SOLID))
            #dc.DrawCircle(x, y, 5)
            gc.Translate(x, y)
            gc.Rotate(-(self.robotPos[2]-self.robotIconRotOffset))
            gc.DrawBitmap(self.robotIcon, -self.robotIconSize[0]/2, -self.robotIconSize[1]/2, self.robotIconSize[0], self.robotIconSize[1])
            gc.PopState()
        
        # Draw fiducials
        for fid_name, fid_pos in self.fiducialPositions.iteritems():
            [x,y] = map(lambda x: int(self.mapScale*x), fid_pos) 
            gc.SetPen(wx.Pen(wx.WHITE, 2, wx.SOLID))
            gc.SetBrush(wx.Brush(wx.BLACK, wx.SOLID))
            gc.DrawEllipse(x, y, 10, 10)

            # Draw label
            font = wx.Font(12, wx.FONTFAMILY_SWISS, wx.NORMAL, wx.NORMAL, False)
            gc.SetFont(font, wx.BLACK)
            
            textWidth, textHeight = dc.GetTextExtent(fid_name)
            
            textX = x + 8 # - textWidth/2
            textY = y - 0.5*textHeight
            gc.DrawText(fid_name, textX, textY)

#        if self.markerPos is not None:
#            [m,n] = map(lambda m: int(self.mapScale*m), self.markerPos) 
#            dc.SetBrush(wx.Brush(wx.RED))
#            dc.DrawCircle(m, n, 5)

        # Blit our buffer to the window
        pane_gc = wx.GraphicsContext.Create(self.map_pane)
        pane_gc.DrawBitmap(draw_buf, 0, 0, draw_buf.GetWidth(), draw_buf.GetHeight())

        dc.SelectObject(wx.NullBitmap)

        if event is not None:
            event.Skip()

    def onClearCommands(self, event):  # wxGlade: GumboMainFrame.<event_handler>
        wx.CallAfter(self.dialogueManager.clear)
        event.Skip()

    def onExecute(self, event):  # wxGlade: GumboMainFrame.<event_handler>
        wx.CallAfter(self.dialogueManager.execute)
        event.Skip()

# end of class GumboMainFrame

class BarebonesDialogueManager(object):
    def __init__(self, gui_window, executor, base_spec=None):
        """ take reference to execution context and gui_window
            optionally initialize with some base spec text """

        self.gui = gui_window
        self.executor = executor

        if base_spec is None:
            self.base_spec = []
        else:
            self.base_spec = base_spec.split("\n")

        self.spec = []

        # Initiate a specCompiler to hang around and give us immediate parser feedback
        self.compiler = SpecCompiler()
        self.compiler.proj = self.gui.proj

    def clear(self):
        self.spec = []
        self.gui.appendLog("Cleared the specification.", "System") 

    def execute(self):
        # TODO: don't resynthesize if the specification hasn't changed?
        #       i.e. distinguish between resuming from pause, versus a new command

        # pause
        self.executor.pause()

        self.gui.appendLog("Please wait...", "System") 

        # TODO: don't freeze the GUI here

        # trigger resynthesis
        success = self.executor.resynthesizeFromNewSpecification(self.getSpec())
        if success:
            # resume
            self.executor.resume()
            self.gui.appendLog("Doing as you asked.", "System")
        else:
            self.gui.appendLog("I'm sorry, I can't do that.  Please try something else.", "System")
            
    def tell(self, message):
        """ take in a message from the user, return a response.
            WARNING: this is effectively running in non-main thread"""
        msg = message.lower().strip()
        if msg == "clear":
            wx.CallAfter(self.clear)
            return
        elif msg == "go":
            wx.CallAfter(self.execute)
            return
        elif msg == "wait":
            self.executor.pause()
            return "Paused."
        elif msg == "status":
            if not self.executor.isRunning():
                return "Currently paused."

            curr_goal_num = self.executor.getCurrentGoalNumber()
            if curr_goal_num is None:
                return "I'm not doing anything right now."
            else:
                return self.executor.getCurrentGoalDescription()
        elif msg == "list":
            return "\n".join(self.spec)
        else:
            # Ask parser if this individual line is OK
            # FIXME: Because _writeLTLFile() is so monolithic, this will
            # clobber the `.ltl` file
            # FIXME: This may only work with SLURP
            self.compiler.proj.specText = message.strip()
            spec, tracebackTree, response = self.compiler._writeLTLFile()
            if spec is not None:
                self.spec.append(message.strip())
            return response[0]

    def getSpec(self):
        """ return the current specification as one big string """
        return "\n".join(self.base_spec + self.spec)

class GumboMainApp(wx.App):
    def OnInit(self):
        wx.InitAllImageHandlers()
        gumboMainFrame = GumboMainFrame(None, wx.ID_ANY, "")
        self.SetTopWindow(gumboMainFrame)
        gumboMainFrame.Show()
        wx.CallAfter(gumboMainFrame.initialize)
        return 1

# end of class GumboMainApp


if __name__ == "__main__":
    gettext.install("gumboMainApp") # replace with the appropriate catalog name

    gumboMainApp = GumboMainApp(0)
    gumboMainApp.MainLoop()
