#!/usr/bin/env python
# -*- coding: us-ascii -*-
# generated by wxGlade 0.6.3 on Tue Jan 26 00:44:24 2010

import wx
import sys, socket
import wx.lib.delayedresult as delayedresult

# begin wxGlade: extracode
# end wxGlade

# For IPC, we need to pass messages by stderr because stdout is buffered.
# But we still want to show errors, so we'll point stderr to stdout.
sys.stdout = sys.__stderr__
sys.stderr = sys.__stdout__

class SensorEditorFrame(wx.Frame):
    def __init__(self, *args, **kwds):
        # begin wxGlade: SensorEditorFrame.__init__
        kwds["style"] = wx.DEFAULT_FRAME_STYLE
        wx.Frame.__init__(self, *args, **kwds)
        self.panel_1 = wx.ScrolledWindow(self, -1, style=wx.TAB_TRAVERSAL)

        self.__set_properties()
        self.__do_layout()
        # end wxGlade

        self.buttons = [] # This will later hold our buttons

        self.waitingForInput = False
        self.Bind(wx.EVT_IDLE, self.onIdle)
        
        self.host = 'localhost'
        self.port = 23459
        self.buf = 1024
        self.addr = (self.host,self.port)
        self.UDPSock = socket.socket(socket.AF_INET,socket.SOCK_DGRAM)
        self.UDPSock.setsockopt(socket.SOL_SOCKET,socket.SO_REUSEADDR,1)
        # Let everyone know we're ready
        #print "Hello!"
	self.UDPSock.sendto("Hello!",self.addr)
        self.UDPSock.close()        

    def __set_properties(self):
        # begin wxGlade: SensorEditorFrame.__set_properties
        self.SetTitle("Dummy Sensor Handler")
        self.SetSize((272, 372))
        self.panel_1.SetScrollRate(10, 10)
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: SensorEditorFrame.__do_layout
        sizer_1 = wx.BoxSizer(wx.VERTICAL)
        sizer_2 = wx.BoxSizer(wx.VERTICAL)
        self.panel_1.SetSizer(sizer_2)
        sizer_1.Add(self.panel_1, 1, wx.EXPAND, 0)
        self.SetSizer(sizer_1)
        self.Layout()
        # end wxGlade

    def sensorToggle(self, event): # wxGlade: SensorEditorFrame.<event_handler>
        btn = event.GetEventObject()
        self.host = 'localhost'
        self.port = 23459
        self.buf = 1024
        self.addr = (self.host,self.port)
        self.UDPSock = socket.socket(socket.AF_INET,socket.SOCK_DGRAM)
        self.UDPSock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)

        self.UDPSock.sendto(btn.GetLabelText() + "=" + str(btn.GetValue()),self.addr)
        #print btn.GetLabelText() + "=" + str(btn.GetValue())

        # TODO: Button background colour doesn't show up very well
        if btn.GetValue():
            btn.SetBackgroundColour(wx.Colour(0, 255, 0)) 
        else:
            btn.SetBackgroundColour(wx.Colour(255, 0, 0)) 

        self.Refresh()

        event.Skip()

    def checkForInput(self):
        return sys.stdin.readline()

    def updateFromInput(self, input):
        """
        We decide what buttons to create based on messages via stdin
        """
        line = input.get().strip()

        try: 
            # Read in the information
            [sensor_name, sensor_value] = line.split(",")
            
            # Create the new button and add it to the sizer
            self.buttons.append(wx.ToggleButton(self.panel_1, -1, sensor_name))
            big_font = wx.Font(pointSize=24, family=wx.FONTFAMILY_DEFAULT, style=wx.FONTSTYLE_NORMAL, weight=wx.FONTWEIGHT_NORMAL)
            self.buttons[-1].SetFont(big_font)
            self.panel_1.GetSizer().Add(self.buttons[-1], 1, wx.EXPAND, 0)

            # Set the initial value as appropriate
            if sensor_value == "1":
                self.buttons[-1].SetValue(True)
                self.buttons[-1].SetBackgroundColour(wx.Colour(0, 255, 0)) 
            else:
                self.buttons[-1].SetValue(False)
                self.buttons[-1].SetBackgroundColour(wx.Colour(255, 0, 0)) 

            self.panel_1.Layout() # Update the frame
            self.Refresh()

            # Bind to event handler
            self.Bind(wx.EVT_TOGGLEBUTTON, self.sensorToggle, self.buttons[-1])

        except ValueError:
            print "(SENSOR) WARNING: Unexpected message received!"

        self.waitingForInput = False  # Make sure another listener gets started

    def onIdle(self, event):
        # TODO: Use plain threading like other parts of LTLMoP?
        if not self.waitingForInput:
            delayedresult.startWorker(self.updateFromInput, self.checkForInput)
            self.waitingForInput = True
        event.Skip()

# end of class SensorEditorFrame


class SensorHandlerApp(wx.App):
    def OnInit(self):
        wx.InitAllImageHandlers()
        frame_1 = SensorEditorFrame(None, -1, "")
        self.SetTopWindow(frame_1)
        frame_1.Show()
        return 1

# end of class SensorHandlerApp

if __name__ == "__main__":
    SensorHandler = SensorHandlerApp(0)
    SensorHandler.MainLoop()
